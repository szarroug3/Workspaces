#!/bin/bash

bold=$(tput bold)
normal=$(tput sgr0)

USAGE=$(cat <<-END
source ./issue_mfa.sh [AWS_USERNAME] [MFA_TOKEN] [-dsva | -test | -v]
   Issues an aws security token and sets it automatically.

   Optional Flags:
   -dsva   attempt sign on with commerical account
   details (rather than gov-cloud details).
   -test   attempts sign on with vetsgov test govcloud account
   -v      echos AWS_SECRET_ACCESS_KEY, AWS_ACCESS_KEY_ID,
   AWS_SECURITY_TOKEN, and AWS_SESSION_TOKEN as exports
   you can set in your shell. AWS_USERNAME is case-sensitive.
END
)

# safety check for source
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "${bold}ERROR:${normal} Check that you are properly sourcing the script"
    echo
    echo "This script should be run as:"
    echo "$ ${bold}source${normal} ./issue_mfa.sh [AWS_USERNAME] [MFA_TOKEN] "
    exit 1
fi

if ! [ -x "$(command -v jq)" ]; then
    echo 'Error: jq is not installed.' >&2
    echo 'Try: brew install jq' >&2
    return 1
fi

if ! [ -x "$(command -v aws)" ]; then
    echo 'Error: aws-cli is not installed.' >&2
    echo 'Try: brew install awscli' >&2
    return 1
fi

if [[ $1 == "-h" ]]; then
    echo "$USAGE"
    return 0
fi

if [[ $# -ne 2 && $# -ne 3 ]]; then
    echo "$USAGE" >&2
    return 1
fi

# dsva account is in the commercial account (rather than gov-cloud)
# region and virtual device number are different for commercial accounts
if [[ $3 == "-dsva" ]]; then
    region="aws"
    mfa_device_number="306228765217"
elif [[ $3 == "-test" ]]; then
    region="aws-us-gov"
    mfa_device_number="268171240745"
else
    region="aws-us-gov"
    mfa_device_number="008577686731"
fi

unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SECURITY_TOKEN
unset AWS_SESSION_TOKEN

aws_out="$(aws sts get-session-token --output json --serial-number arn:$region:iam::$mfa_device_number:mfa/$1 --token-code $2)"

if [ $? -ne 0 ]; then
    echo -e "${bold}ERROR:${normal} Could not set AWS Sessions. Read error above..."
else
    aws_id=$(echo $aws_out | jq -r .Credentials.AccessKeyId)
    aws_secret=$(echo $aws_out | jq -r .Credentials.SecretAccessKey)
    aws_session=$(echo $aws_out | jq -r .Credentials.SessionToken)

    current_time=$(date +%s)
    expiration_time=$((($current_time + (12 * 60 * 60))))

    mkdir -p ~/.aws
    cat > ~/.aws/session_credentials.sh <<EOF
    # This file was generated by a script that can be found here:
    # https://github.com/department-of-veterans-affairs/devops/blob/master/utilities/issue_mfa.sh
    # This file may be safely deleted.

    export AWS_EXPIRATION_TIME=$expiration_time
    export AWS_ACCESS_KEY_ID=$aws_id
    export AWS_SECRET_ACCESS_KEY=$aws_secret
    export AWS_SECURITY_TOKEN=$aws_session
    export AWS_SESSION_TOKEN=$aws_session
EOF

    cat > ~/.aws/session_credentials.env <<EOF
    # This file was generated by a script that can be found here:
    # https://github.com/department-of-veterans-affairs/devops/blob/master/utilities/issue_mfa.sh
    # This file may be safely deleted.

    AWS_EXPIRATION_TIME=$expiration_time
    AWS_ACCESS_KEY_ID=$aws_id
    AWS_SECRET_ACCESS_KEY=$aws_secret
    AWS_SECURITY_TOKEN=$aws_session
    AWS_SESSION_TOKEN=$aws_session
EOF

    source ~/.aws/session_credentials.sh

    echo "${bold}AWS Session credentials saved. Will expire in 12 hours${normal}"

    if [[ $3 == "-v" ]]; then
        echo " export AWS_ACCESS_KEY_ID=$aws_id"
        echo " export AWS_SECRET_ACCESS_KEY=$aws_secret"
        echo " export AWS_SECURITY_TOKEN=$aws_session"
        echo " export AWS_SESSION_TOKEN=$aws_session"
    fi
fi
